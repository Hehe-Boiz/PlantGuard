// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AlertStatus {
  NEW
  ACKNOWLEDGED
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  passwordHash  String
  name          String?
  role          String      @default("USER")
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  refreshTokens RefreshToken[]
  devices       Device[]
  notifications Notification[]
  config        Configuration?
}

model RefreshToken {
  id            String      @id @default(cuid())
  token         String      @unique
  expiresAt     DateTime
  revoked       Boolean     @default(false)
  createAt      DateTime    @default(now())

  user          User        @relation(fields: [userID], references: [id])
  userID        String
}

model Device {
  id            String      @id @default(cuid())
  name          String
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String
  status        String      @default("OFFLINE")
  location      String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // relations
  readings    SensorReading[]
  alerts      Alert[]
}

model SensorReading {
  id            String      @id @default(cuid())
  device        Device      @relation(fields: [deviceId], references: [id])
  deviceId      String
  timestamp     DateTime
  temperature   Float?
  humidity      Float?
  light         Float?
  extra         Json?     

  @@index([deviceId, timestamp])
}

model Alert {
  id            String      @id @default(cuid())
  device        Device      @relation(fields: [deviceId], references: [id])
  deviceId      String
  timestamp     DateTime    @default(now())
  type          String     
  message       String
  status        AlertStatus @default(NEW)

  @@index([deviceId, status])
}

model Notification {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  title         String
  body          String
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())

  @@index([userId, isRead])
}

model Configuration {
  id                     String   @id @default(cuid())
  user                   User?    @relation(fields: [userId], references: [id])
  userId                 String?  
  thresholdTemperature   Float
  thresholdHumidity      Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([userId])
}