# <<< THAY TH·∫æ TO√ÄN B·ªò FILE N√ÄY B·∫∞NG PHI√äN B·∫¢N CU·ªêI C√ôNG >>>

import cv2
import numpy as np
import onnxruntime as ort
from typing import List, Tuple, Optional
import tensorflow as tf

def softmax(x):
    """T√≠nh softmax ƒë·ªÉ chuy·ªÉn ƒë·ªïi scores th√†nh x√°c su·∫•t."""
    e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))
    return e_x / np.sum(e_x, axis=-1, keepdims=True)

class YoloClassifier:
    def __init__(self, model_path: str, input_size: int, conf_thres: float):
        """
        Kh·ªüi t·∫°o Classifier.
        """
        self.session = ort.InferenceSession(model_path, providers=['CPUExecutionProvider'])
        self.input_name = self.session.get_inputs()[0].name
        self.output_name = self.session.get_outputs()[0].name
        self.input_size = input_size
        self.conf_thres = conf_thres
        print(f"YOLO Classifier service initialized with model from {model_path}.")

    def _preprocess(self, frame: np.ndarray) -> np.ndarray:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh v·ªõi letterbox padding."""
        h, w = frame.shape[:2]
        scale = self.input_size / max(h, w)
        nh, nw = int(h * scale), int(w * scale)
        resized = cv2.resize(frame, (nw, nh))
        
        canvas = np.full((self.input_size, self.input_size, 3), 114, dtype=np.uint8)
        pad_top = (self.input_size - nh) // 2
        pad_left = (self.input_size - nw) // 2
        canvas[pad_top:pad_top + nh, pad_left:pad_left + nw] = resized
        
        return cv2.dnn.blobFromImage(canvas, 1/255.0, (self.input_size, self.input_size), swapRB=True, crop=False)

    def _postprocess(self, preds: np.ndarray) -> Optional[Tuple[int, float]]:
        """
        H·∫≠u x·ª≠ l√Ω cho model tr·∫£ v·ªÅ m·ªôt m·∫£ng scores (shape: 1x10).
        ƒê√¢y l√† phi√™n b·∫£n ch√≠nh x√°c cu·ªëi c√πng.
        """
        # `preds` c√≥ shape (1, 10), ta l·∫•y m·∫£ng 10 scores b√™n trong.
        scores = preds[0]
        
        # Chuy·ªÉn ƒë·ªïi scores th√†nh x√°c su·∫•t b·∫±ng softmax
        probabilities = softmax(scores)
        
        # T√¨m l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t
        predicted_class_id = np.argmax(probabilities)
        confidence = probabilities[predicted_class_id]
        
        # √Åp d·ª•ng ng∆∞·ª°ng tin c·∫≠y
        if confidence < self.conf_thres:
            return None
        
        return int(predicted_class_id), float(confidence)

    def classify(self, images: List[np.ndarray]) -> List[Optional[Tuple[int, float]]]:
        """
        Kh√¥i ph·ª•c l·∫°i h√†m classify chu·∫©n.
        """
        if not images:
            return []
            
        results = []
        for img in images:
            blob = self._preprocess(img)
            # ƒê·∫ßu ra c·ªßa session.run l√† m·ªôt list, ta l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            preds_list = self.session.run([self.output_name], {self.input_name: blob})
            preds_array = preds_list[0]
            best_result = self._postprocess(preds_array)
            results.append(best_result)
            
        return results
# class CNNClassifier:
#     def __init__(self, model_path: str, input_size: int, conf_thres: float):
#         """Kh·ªüi t·∫°o Classifier cho model CNN."""
#         self.session = ort.InferenceSession(model_path, providers=['CPUExecutionProvider'])
#         self.input_name = self.session.get_inputs()[0].name
#         self.output_name = self.session.get_outputs()[0].name
#         self.input_size = (input_size, input_size)
#         self.conf_thres = conf_thres
#         print(f"CNN Classifier service initialized with model from {model_path}.")

#     def _preprocess(self, frame: np.ndarray) -> np.ndarray:
#         """
#         Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho model CNN.
#         - Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc y√™u c·∫ßu.
#         - Chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ [0, 1].
#         - Chuy·ªÉn ƒë·ªïi BGR sang RGB.
#         - Thay ƒë·ªïi shape t·ª´ (H, W, C) sang (1, H, W, C).
#         """
#         resized_image = cv2.resize(frame, self.input_size)
#         image_data = resized_image.astype('float32') / 255.0
#         # Chuy·ªÉn ƒë·ªïi BGR sang RGB
#         image_data = image_data[:, :, ::-1]
#         # Th√™m batch dimension (1, H, W, C)
#         image_data = np.expand_dims(image_data, axis=0)
#         return image_data

#     def _postprocess(self, preds: np.ndarray) -> Optional[Tuple[int, float]]:
#         """H·∫≠u x·ª≠ l√Ω cho model CNN."""
#         scores = preds[0]
#         probabilities = softmax(scores)
        
#         predicted_class_id = np.argmax(probabilities)
#         confidence = probabilities[predicted_class_id]
        
#         if confidence < self.conf_thres:
#             return None
        
#         return int(predicted_class_id), float(confidence)

#     def classify(self, images: List[np.ndarray]) -> List[Optional[Tuple[int, float]]]:
#         """Ch·∫°y ph√¢n lo·∫°i tr√™n m·ªôt danh s√°ch ·∫£nh."""
#         if not images:
#             return []
            
#         results = []
#         for img in images:
#             blob = self._preprocess(img)
#             preds_list = self.session.run([self.output_name], {self.input_name: blob})
#             preds_array = preds_list[0]
#             best_result = self._postprocess(preds_array)
#             results.append(best_result)
            
#         return results

class CNNClassifier:
    def __init__(self, model_path: str, input_size: int, conf_thres: float):
        """Kh·ªüi t·∫°o Classifier cho model CNN."""
        self.session = ort.InferenceSession(model_path, providers=['CPUExecutionProvider'])
        self.input_name = self.session.get_inputs()[0].name
        self.output_name = self.session.get_outputs()[0].name
        self.input_size = (input_size, input_size) # S·∫Ω l√† (224, 224) sau khi s·ª≠a config
        self.conf_thres = conf_thres
        print(f"CNN Classifier service initialized with model from {model_path}.")

    def _preprocess(self, frame: np.ndarray) -> np.ndarray:
        """
        --- ƒê√É S·ª¨A L·ªñI ---
        Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho model CNN y√™u c·∫ßu ƒë·ªãnh d·∫°ng NCHW.
        - Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc y√™u c·∫ßu (224x224).
        - Chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ [0, 1].
        - Chuy·ªÉn ƒë·ªïi BGR sang RGB.
        - Thay ƒë·ªïi shape t·ª´ (H, W, C) sang (1, C, H, W).
        """
        # Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc model y√™u c·∫ßu
        resized_image = cv2.resize(frame, self.input_size)
        
        # Chu·∫©n h√≥a v·ªÅ [0,1] v√† ƒë·ªïi BGR to RGB
        image_data = resized_image.astype('float32') / 255.0
        image_data = image_data[:, :, ::-1] # BGR -> RGB
        
        # === PH·∫¶N S·ª¨A L·ªñI QUAN TR·ªåNG ===
        # Chuy·ªÉn t·ª´ (H, W, C) sang (C, H, W)
        image_data = np.transpose(image_data, (2, 0, 1))
        
        # Th√™m batch dimension ƒë·ªÉ c√≥ shape cu·ªëi c√πng l√† (1, C, H, W)
        image_data = np.expand_dims(image_data, axis=0)
        
        return image_data

    def _postprocess(self, preds: np.ndarray) -> Optional[Tuple[int, float]]:
        """H·∫≠u x·ª≠ l√Ω cho model CNN."""
        scores = preds[0]
        probabilities = softmax(scores) # Gi·∫£ ƒë·ªãnh h√†m softmax ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü ƒë·∫ßu file
        
        predicted_class_id = np.argmax(probabilities)
        confidence = probabilities[predicted_class_id]
        
        if confidence < self.conf_thres:
            return None
        
        return int(predicted_class_id), float(confidence)

    def classify(self, images: List[np.ndarray]) -> List[Optional[Tuple[int, float]]]:
        """Ch·∫°y ph√¢n lo·∫°i tr√™n m·ªôt danh s√°ch ·∫£nh."""
        if not images:
            return []
            
        results = []
        for img in images:
            blob = self._preprocess(img)
            preds_list = self.session.run([self.output_name], {self.input_name: blob})
            preds_array = preds_list[0]
            best_result = self._postprocess(preds_array)
            results.append(best_result)
            
        return results
class TensorFlowH5Classifier:
    def __init__(self, model_path: str, input_size: int, conf_thres: float):
        """
        Kh·ªüi t·∫°o Classifier cho model TensorFlow .h5.
        `input_size` t·ª´ config s·∫Ω ƒë∆∞·ª£c b·ªè qua v√† thay b·∫±ng k√≠ch th∆∞·ªõc th·ª±c t·∫ø t·ª´ model.
        """
        self.model = tf.keras.models.load_model(model_path)
        self.conf_thres = conf_thres

        # --- THAY ƒê·ªîI QUAN TR·ªåNG ---
        # T·ª± ƒë·ªông l·∫•y k√≠ch th∆∞·ªõc input (height, width) t·ª´ model ƒë√£ t·∫£i.
        # V√≠ d·ª•: model.input_shape c√≥ th·ªÉ l√† (None, 224, 224, 3)
        # Ch√∫ng ta s·∫Ω l·∫•y (224, 224)
        try:
            model_input_shape = self.model.input_shape
            # L·∫•y chi·ªÅu cao (v·ªã tr√≠ 1) v√† chi·ªÅu r·ªông (v·ªã tr√≠ 2)
            self.input_size = (model_input_shape[1], model_input_shape[2])
        except (TypeError, IndexError):
            # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c, quay l·∫°i d√πng gi√° tr·ªã t·ª´ config
            print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ t·ª± ƒë·ªông x√°c ƒë·ªãnh input_shape t·ª´ model. S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ config.")
            self.input_size = (input_size, input_size)

        print(f"‚úÖ TensorFlow H5 Classifier initialized with model from {model_path}.")
        print(f"   üí° Model expects input size: {self.input_size}") # In ra k√≠ch th∆∞·ªõc th·ª±c t·∫ø

    def _preprocess(self, frame: np.ndarray) -> np.ndarray:
        """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho model .h5."""
        # self.input_size b√¢y gi·ªù l√† k√≠ch th∆∞·ªõc ch√≠nh x√°c (H, W) ƒë∆∞·ª£c l·∫•y t·ª´ model
        resized_image = cv2.resize(frame, self.input_size)
        image_data = resized_image.astype('float32') / 255.0
        # Th√™m batch dimension ƒë·ªÉ t·∫°o th√†nh tensor (1, H, W, C)
        image_data = np.expand_dims(image_data, axis=0)
        return image_data

    def _postprocess(self, preds: np.ndarray) -> Optional[Tuple[int, float]]:
        """H·∫≠u x·ª≠ l√Ω cho model .h5."""
        # Ki·ªÉm tra n·∫øu preds c√≥ nhi·ªÅu h∆°n 1 batch (d√π predict ch·ªâ ch·∫°y 1 ·∫£nh)
        if preds.shape[0] > 1:
            scores = preds[0]
        else:
            scores = preds.flatten() # L√†m ph·∫≥ng m·∫£ng (1, num_classes) th√†nh (num_classes,)

        probabilities = softmax(scores)
        predicted_class_id = np.argmax(probabilities)
        confidence = probabilities[predicted_class_id]
        
        if confidence < self.conf_thres:
            return None
            
        return int(predicted_class_id), float(confidence)

    def classify(self, images: List[np.ndarray]) -> List[Optional[Tuple[int, float]]]:
        """Ch·∫°y ph√¢n lo·∫°i tr√™n m·ªôt danh s√°ch ·∫£nh."""
        if not images:
            return []
            
        results = []
        for img in images:
            blob = self._preprocess(img)
            # S·ª≠ d·ª•ng c·ªù verbose=0 ƒë·ªÉ t·∫Øt logging c·ªßa h√†m predict
            preds = self.model.predict(blob, verbose=0)
            best_result = self._postprocess(preds)
            results.append(best_result)
            
        return results